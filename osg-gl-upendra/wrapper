#!/usr/bin/env python

from __future__ import print_function
from os.path import expanduser

import itertools
import json
import os
import requests
import shutil
import socket
import subprocess
import sys
import re

from get_gene_length_filter import get_gene_lengths

# The name of the configuration file.
config_file = "config.json"

# A clean way to print to stderr.
def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

# A class to load configuration settings.
class Config:
    def __init__(self, config_json):
        self.arguments = self.extract_setting(config_json, "arguments", default=[])
        self.irods_host = self.extract_setting(config_json, "irods_host")
        self.irods_port = self.extract_setting(config_json, "irods_port", default=1247)
        self.irods_job_user = self.extract_setting(config_json, "irods_job_user")
        self.irods_user = self.extract_setting(config_json, "irods_user_name")
        self.irods_zone = self.extract_setting(config_json, "irods_zone_name", default="")
        self.input_ticket_list = self.extract_setting(config_json, "input_ticket_list", default="input_ticket.list")
        self.output_ticket_list = self.extract_setting(config_json, "output_ticket_list", default="output_ticket.list")
        self.status_update_url = self.extract_setting(config_json, "status_update_url")
        self.stdout = self.extract_setting(config_json, "stdout", default="out.txt")
        self.stderr = self.extract_setting(config_json, "stderr", default="err.txt")

    def extract_setting(self, config_json, attribute, default=None):
        if attribute in config_json:
            return config_json[attribute]
        elif default is not None:
            return default
        else:
            eprint("required configuration setting {0} not provided".format(attribute))
            sys.exit(1)

# This is a simple context manager class designed to make it easier to read and write iRODS ticket list files.
class TicketListReader:
    def __init__(self, path):
        self.path = path

    def __enter__(self):
        self.fd = open(self.path, "r")
        self.r = itertools.imap(lambda l: l.strip().split(",", 1), itertools.ifilter(lambda l: l[0] != '#', self.fd))
        return self.r

    def __exit__(self, type, value, traceback):
        self.fd.close()

# This is a simple class used to send job status update messages.
class JobStatusUpdater:
    def __init__(self, url):
        self.url = url

    def print_update(self, status, message):
        print("{0}: {1}".format(status, message))

    def send_update(self, status, message):
        self.print_update(status, message)
        body = {"state": status, "message": message, "hostname": socket.gethostname()}
        r = requests.post(self.url, json=body)
        if r.status_code < 200 or r.status_code > 299:
            eprint("unable to send job status update: {0} {1}: {2}".format(status, message, r.content))

    def failed(self, message):
        self.send_update("failed", message)

    def running(self, message):
        self.send_update("running", message)

    def completed(self, message):
        self.send_update("completed", message)

# Load the configuration file.
def load_config():
    with open(config_file, "r") as f:
        return Config(json.load(f))

# Ensure that a directory exists.
def ensuredir(path, mode):
    if not os.path.exists(path):
        os.mkdir(path, mode)

# Initialize iRODS.
def init_irods(host, port, user):
    ensuredir(expanduser("~/.irods"), 0755)
    shutil.copyfile(config_file, expanduser("~/.irods/irods_environment.json"))

# Download a file or directory from iRODS.
def download_file(ticket, src):
    rc = subprocess.call(["iget", "-rt", ticket, src])
    if rc != 0:
        raise Exception("could not download {0}".format(src))

# Download a set of files referenced in a ticket list file from iRODS, returning a list of downloaded files.
def download_files(ticket_list_path):
    with TicketListReader(ticket_list_path) as tlr:
        for ticket, src in tlr:
            download_file(ticket, src)

# Run the gene length job.
def run_job(arguments, output_filename, error_filename):
    output_files = []
    with open(output_filename, "w") as out, open(error_filename, "w") as err:
        for input_file in arguments:
            output_file = re.sub(r"[.][^.]+$", ".txt", input_file)
            try:
                with open(input_file, "rU") as fh_in, open(output_file, "w") as fh_out:
                    get_gene_lengths(fh_in, fh_out)
                    output_files += [output_file]
            except Exception as e:
                msg = "error processing {0}: {1}".format(input_file, e)
                eprint(msg)
                raise Exception(msg)
    return output_files

# Upload a file or directory to iRODS.
def upload_file(ticket, irods_user, owner, src, dest):
    rc = subprocess.call(["iput", "-rt", ticket, src, dest])
    if rc != 0:
        raise Exception("could not upload {0} to {1}".format(src, dest))

    # Don't bother modifying the file permissions if the iRODS user and file owner are the same.
    if irods_user == owner:
        return

    # Update the file permissions so that the person who submitted the job can see the output files.
    fullpath = os.path.join(dest, src)
    rc = subprocess.call(["ichmod", "own", owner, fullpath])
    if rc != 0:
        raise Exception("could not change the owner of {0} to {1}".format(fullpath, owner))
    rc = subprocess.call(["ichmod", "null", irods_user, fullpath])
    if rc != 0:
        raise Exception("could not remove {0} permissions on {1}".format(irods_user, fullpath))

# Upload a set of files to the directories referenced in a ticket list file to iRODS.
def upload_files(ticket_list_path, irods_user, owner, files, updater):
    failed_uploads = []
    with TicketListReader(ticket_list_path) as tlr:
        for ticket, dest in tlr:
            for src in files:
                updater.running("uploading {0} to {1}".format(src, dest))
                try:
                    upload_file(ticket, irods_user, owner, src, dest)
                except Exception as e:
                    updater.running(e.message)
                    failed_uploads.append(src)
    if len(failed_uploads) > 0:
        raise Exception("the following files could not be uploaded: {0}".format(failed_uploads))

if __name__ == "__main__":
    # Load the configuration file.
    cfg = load_config()

    # Create a job status updater and send the running update.
    updater = JobStatusUpdater(cfg.status_update_url)
    updater.running("configuration successfully loaded")

    # Initialize iRODS.
    try:
        updater.running("initializing the iRODS connection")
        init_irods(cfg.irods_host, cfg.irods_port, cfg.irods_user)
    except Exception as e:
        updater.failed("unable to initialize the iRODS connection: {0}".format(e))
        sys.exit(1)

    # Download the files from iRODS, assuming that all tickets refer to regular files for now.
    try:
        updater.running("downloading the input files")
        download_files(cfg.input_ticket_list)
    except Exception as e:
        updater.failed("unable to download input files: {0}".format(e))
        sys.exit(1)

    # Keep track of whether or not the job has failed.
    job_failed = False

    # Run the job.
    output_files = []
    try:
        updater.running("processing the input files")
        output_files = run_job(cfg.arguments, cfg.stdout, cfg.stderr)
    except Exception as e:
        updater.running("job encountered an error: {0}".format(e))
        job_failed = True

    # Upload the output files.
    try:
        updater.running("uploading the output files")
        files_to_upload = [cfg.stdout, cfg.stderr] + output_files
        upload_files(cfg.output_ticket_list, cfg.irods_user, cfg.irods_job_user, files_to_upload, updater)
    except Exception as e:
        updater.running("unable to upload output files: {0}".format(e))
        job_failed = True

    # Send the final job status update.
    if job_failed:
        updater.failed("job failed; see prior status update messages for details")
        sys.exit(1)
    else:
        updater.completed("job completed successfully")
